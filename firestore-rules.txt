rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Allow users to access only their own user document and subcollections
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // User's transactions
      match /transactions/{transactionId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      // User's summaries
      match /summaries/{summaryId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      // User's calendar data
      match /calendar/{dateId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Family links collection - users can manage their own family connections
    match /family_links/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Notifications collection - users can read/write their own notifications
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && 
        (resource.data.to == request.auth.uid || resource.data.from == request.auth.uid);
      allow create: if request.auth != null && 
        (request.resource.data.to is string || request.resource.data.from == request.auth.uid);
    }

    // Weekly recap tracking - users can manage their own email preferences
    match /email_notifications/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Test collection - for debugging purposes (remove in production)
    match /test/{testId} {
      allow read, write: if request.auth != null;
    }

    // Settings collection - for app-wide settings (admin only)
    match /settings/{settingId} {
      allow read: if request.auth != null;
      // Add admin check here if needed: allow write: if request.auth != null && request.auth.token.admin == true;
    }
  }
}

// Realtime Database rules (if using)
// Copy this to your Realtime Database rules:
/*
{
  "rules": {
    "users": {
      "$userId": {
        ".read": "$userId === auth.uid",
        ".write": "$userId === auth.uid"
      }
    },
    "test": {
      ".read": "auth != null",
      ".write": "auth != null"
    }
  }
}
*/
